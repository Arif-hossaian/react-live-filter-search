{"version":3,"sources":["logo.svg","About.js","Contact.js","Error.js","Menu.js","Services.js","SearchResult.js","Search.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","props","className","name","Contact","Error","Menu","exact","activeClassName","to","Services","SearchResult","img","src","alt","Search","useState","setImg","type","placeholder","value","onChange","event","data","target","console","log","Main","path","component","render","User","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0LAAAA,EAAOC,QAAU,IAA0B,kC,4HCW5BC,MARf,SAAeC,GACX,OACI,yBAAKC,UAAU,aACX,0CAAgBD,EAAME,KAAtB,WCIGC,MARf,WACI,OACI,yBAAKF,UAAU,aACX,sDCMGG,I,OCMAC,MAdf,WACI,OACI,yBAAKJ,UAAU,cAEf,kBAAC,IAAD,CAASK,OAAK,EAACC,gBAAgB,eAAeC,GAAG,KAAjD,YACA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,eAAeC,GAAG,YAAjD,YACA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,eAAeC,GAAG,WAAjD,UACA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,eAAeC,GAAG,UAAjD,QACA,kBAAC,IAAD,CAASF,OAAK,EAACC,gBAAgB,eAAeC,GAAG,YAAjD,gBCDOC,MARf,SAAkBT,GACd,OACI,yBAAKC,UAAU,aACX,0CAAgBD,EAAME,KAAtB,W,yBCQGQ,MAVf,SAAsBV,GAElB,IAAMW,EAAG,+CAA2CX,EAAME,MAC1D,OACI,6BACI,yBAAKU,IAAKD,EAAME,IAAI,kBCYjBC,MAjBf,WAAmB,IAAD,EAESC,mBAAS,IAFlB,mBAENJ,EAFM,KAEDK,EAFC,KASd,OACI,yBAAKf,UAAU,cACX,2BAAOgB,KAAK,OAAOC,YAAY,kBAAkBC,MAAOR,EAAKS,SAPlD,SAACC,GAChB,IAAMC,EAAOD,EAAME,OAAOJ,MAC1BK,QAAQC,IAAIH,GACZN,EAAOM,MAKQ,KAARX,EAAa,KAAO,kBAAC,EAAD,CAAcT,KAAMS,MCaxCe,MAjBf,WACI,OACI,6BACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpB,OAAK,EAACqB,KAAK,IAAIC,UAAY,kBAAK,kBAAC,EAAD,CAAQ1B,KAAK,aACpD,kBAAC,IAAD,CAAOI,OAAK,EAACqB,KAAK,WAAWE,OAAQ,kBAAK,kBAAC,EAAD,CAAW3B,KAAK,eAC1D,kBAAC,IAAD,CAAOyB,KAAK,WAAWC,UAAWzB,IAClC,kBAAC,IAAD,CAAOwB,KAAK,UAAUC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,sBAAsBC,UAAWE,SCJ1CC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAEL,kBAAC,EAAD,MACFS,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.528ea8b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React from 'react'\r\n\r\nfunction About(props) {\r\n    return (\r\n        <div className=\"text_area\">\r\n            <h1> i am from {props.name} page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div className=\"text_area\">\r\n            <h1> i from contact page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","\r\nimport React from 'react'\r\n\r\nfunction Error() {\r\n    return (\r\n        <div>\r\n            <h1>opps page not found</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nfunction Menu() {\r\n    return (\r\n        <div className=\"menu_style\">\r\n\r\n        <NavLink exact activeClassName=\"active_class\" to=\"/\">About us</NavLink>\r\n        <NavLink exact activeClassName=\"active_class\" to=\"/service\">services</NavLink>\r\n        <NavLink exact activeClassName=\"active_class\" to=\"/search\">Search</NavLink>\r\n        <NavLink exact activeClassName=\"active_class\" to=\"/user/\">User</NavLink>\r\n        <NavLink exact activeClassName=\"active_class\" to=\"/contact\">Contact us</NavLink>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\n\r\nfunction Services(props) {\r\n    return (\r\n        <div className=\"text_area\">\r\n            <h1> i am from {props.name} page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Services","\r\nimport React from 'react'\r\n\r\nfunction SearchResult(props) {\r\n\r\n    const img = `https://source.unsplash.com/600x400/?${props.name}`\r\n    return (\r\n        <div>\r\n            <img src={img}  alt=\"random_link\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResult","import React,{useState} from 'react'\r\nimport SearchResult from './SearchResult'\r\n\r\nfunction Search() {\r\n\r\n    const [ img, setImg] = useState(\"\")\r\n\r\n    const inputEvent = (event) =>{\r\n        const data = event.target.value\r\n        console.log(data)\r\n        setImg(data)\r\n    }\r\n    return (\r\n        <div className=\"search_bar\">\r\n            <input type=\"text\" placeholder=\"Search anything\" value={img} onChange={inputEvent}></input>\r\n             { img === \"\" ? null : <SearchResult name={img}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","\r\nimport React from 'react'\r\nimport {Route, Switch, } from \"react-router-dom\"\r\nimport About from \"./About\"\r\nimport Contact from \"./Contact\"\r\nimport Error from \"./Error\"\r\nimport Menu from './Menu'\r\nimport Services from \"./Services\"\r\nimport User from \"./User\"\r\nimport Search from './Search'\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n        <Menu />\r\n        <Switch>\r\n            <Route exact path=\"/\" component={ () =><About  name=\"About\"/>} />\r\n            <Route exact path=\"/service\" render={() =><Services  name=\"service\"/>} />\r\n            <Route path=\"/contact\" component={Contact}/>\r\n            <Route path=\"/search\" component={Search}/>\r\n            <Route path=\"/user/:fname/:lname\" component={User} />\r\n\r\n            {/* <Route  component={Error}/> */}\r\n        </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Main';\nimport {BrowserRouter} from \"react-router-dom\"\nimport Menu from \"./Menu\"\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}